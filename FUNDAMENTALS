


|||-------|||-------|||-------|||-------|||-------|||-------VARIABLES-------|||-------|||-------|||-------|||-------|||-------|||

    -LET: alcance de un ambito en particular
    -CONST: una vez inicializada y asignado un valor, no se puede cambiar. 
    -VAR: alcance Global y de Funcion

-------------------------------------------------------------------------------------------------------------------------------------------



|||-------|||-------|||-------|||-------|||-------|||-------STRING-------|||-------|||-------|||-------|||-------|||-------|||

    cadena de caracteres, secuencia de caracteres, 3 formas de inicializar.

    --DECLARACION--

    COMILLAS SIMPLES: ' '
    COMILLAS DOBLES: " "
    COMILLAS INVERTIDAS: “ “

    let str1 = 'Hola, esto es un string con comillas simples.';
    let str2 = String ("Hola, esto es un string con comillas dobles.");
    let str3 = new String (“Hola, esto es un string con comillas
    invertidas.”);


    --METODOS--
    String.length: devuelve cantidad caracteres
    String.charAt(int i): devuelve el caracter de la posicion de i
    var mensaje = String.concat("Hola", nombre);: concatena 2 Strings
    String.toUpperCase: Convierte el string en MAYUSCULA
    String.toLowerCase: Convierte el string en MINUSCULA.
    String.slice(int start, int end): devuelve una porcio del String especifciada de una posicion a la otra
    String.substring(start, end): igual a silce pero permite valores negativos
    String.indexOf(subCadena, fromIndex): devuelve la primera posicion donde se encuentre la subcadena, o -1 si no lo encuentra
    String.lastIndexOf(subCadena, fromIndex): igual que indexOf pero desde el final
    String.replace(cadenaARemplazar, nuevoString): reemplaza el primer parametro por el segundo en el string.



-------------------------------------------------------------------------------------------------------------------------------------------


|||-------|||-------|||-------|||-------|||-------OPERADORES-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------
Prioridades de orden de operadores...

-1 parentesis
-2 exponente()
-3 multiplicacion, division, modulo. (de izquierda a derecha)
-4 suma, resta. (de izquierda a derecha)
-5 operadores de concatenacion
-6 operadores de comparacion (==, !=, <,>, <=, >=,etc)
-7 operadores logicos (&&, ||), (&& tiene mas prioridad que ||)
-8 asignaciones (=, +=, -=, etc)

-------------------------------------------------------------------------------------------------------------------------------------------

 |||-------|||-------|||-------|||-------|||-------OBJETOS LITERALES-------|||-------|||-------|||-------|||-------|||-------|||-------
    Se declaran con {} y son pares "clave-valor" separadas por coma , ...




-SIMPLE-

    var objetoPrueba = {

        nombre : 'santiago',
        apellido : 'ude',
        edad : 20,
        altura : 1.87,
        peso : 250
    }


-CON OBJETO DENTRO-

var objetoPrueba = {

        nombre : 'santiago',
        apellido : 'ude',
        edad : 20,
        altura : 1.87,
        peso : 250,
        notas :{
            matematica : 3,
            biologia : 4,
            ed_fisica : 8,
            historia : 10
        }
    }


-CON FUNCION Y OBJETO-

var objetoPrueba = {

        nombre : 'santiago',
        apellido : 'ude',
        edad : 20,
        altura : 1.87,
        peso : 250,
        notas : {
            matematica : 3,
            biologia : 4,
            ed_fisica : 8,
            historia : 10
        }
        saludar: function(){
            console.log('Hola como estas?, mi nombre es ${this.nombre}') // console.log('Hola como estas?, mi nombre es ' + this.nombre)
        }

    }


-ESTRUCTURA COMPLEJA-

    var empresa = {

        nombre: 'Mcdonald',
        area: 'Food & Beverage',
        empleados: [

            {nombre: 'ramiro',
            apellido: 'funes mori',
            edad: 33}
            ,
            {nombre: 'juan sebastian',
            apellido: 'veron',
            edad: 55
            }
            ,
            {nombre: 'fernando',
            apellido: 'cavenaghi',
            edad: 26
            }

        ]
    }


---CAMBIAR/MODIFICAR VALORES DEL OBJETO---
2 formas...

-CON ":" -> persona.nombre = 'rodrigo';
-CON "[]" -> persona["nombre"] = 'rodrigo';


-------------------------------------------------------------------------------------------------------------------------------------------

|||-------|||-------|||-------|||-------|||-------"use strict"-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------

es un llamado para que, el bloque de codigo seguido o archivo de codigo, cuente con ciertas restricciones 
para un codigo mas seguro y robusto.

Por ejemplo --no permite las declaraciones implicitas(no permite declaraciones sin var,let,const)


--Object.freeze--
1: Transforma un objeto totalmente inmutable, no puede agregar, eliminar ni modificar ningun dato.
2: Propiedades NO configurables, no se pueden cambiar los atributos
3: Recursiva, Si el objeto contiene propiedades que tambien son objetos, tambien se les aplica el Object.freeze



--Object.seal--

1: inmutabilidad parcial, permite modificar las propiedades existentes, pero no agregar nuevas o eliminar.
2: Propiedades no configurables
3: Recursiva.


-------------------------------------------------------------------------------------------------------------------------------------------

|||-------|||-------|||-------|||-------|||-------OBJETO CONSTRUCTOR-------|||-------|||-------|||-------|||-------|||-------|||-------
Funcion para crear/construir nuevos objetos...
new + nombre CONSTRUCTOR

~~ Si agregas un atributo sin el this permite crear una especie de privacidad o encapsulamiento que no se consigue de manera nativa en JS~~


EJEMPLO:

function Persona(nombre,apellido,edad,altura,peso){


    this.nombre = nombre;
    this.apellido = apellido;
    this.edad = edad;
    this.infoAdicional;{
    
    this.altura = altura;
    this.peso = peso;
    
    };
    
    this.darInfo = function(){
    
    console.log(`Mi nombre es ${this.nombre + ' ' + this. apellido} y tengo ${this.edad} anios, peso ${this.peso} kg y mido ${this.altura}m. Un gusto.`)
    
    };
    
    }


-------------------------------------------------------------------------------------------------------------------------------------------

|||-------|||-------|||-------|||-------|||-------TIPOS DATOS COMPUESTOS-------|||-------|||-------|||-------|||-------|||-------|||-------

1 OBJECT: Coleccion de pares {clave : valor}.
2 ARRAY: Lista ordenada de elementos de cualquier tipo, indexada con indices desde 0
3 FUNCTION: Es un objeto de primera clase, que puede retornar algo que se le asigne a una variable, que imprima algo,etc
4 DATE: Se utiliza para manejar Horas y Fechas
5 RegExp (expresiones regulares): son variables que almacenan una especie de reestriccion que se usa para coincidir una cadena de texto con una ESTRUCTURA
6 MAP: coleccion de pares {clave: valor} claves de cualquier tipo
7 SET: conjunto de valores, no permite duplicados.
8 WEAKMAP: similar a MAP pero las claves son solo objetos y si no se referencian por un tiempo se borran
9 WEAKSET:similar a SET pero los elementos son solo objetos y si no se referencian se borran.

-------------------------------------------------------------------------------------------------------------------------------------------

        
|||-------|||-------|||-------|||-------|||-------ARRAYS-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------


Metodos:


Array.length : devuelve la cantidad de elementos del array (longitud)

-AGREGAR
Array.push(element) : agrega un elemento al final del array.
array[index] = num : agrega un elemento num en la posicion index.
array.unshift(element): agrega un elemento al principio del array. 

-ELIMINAR
array.shift(): elimina el primer elemento del arreglo.
array.splice(2,1): elimina de la posicion 2, 1 elemento en adelante.
array.splice(2) : elimina desde la posicion 2 hasta el final del array.

-RECORRER/FILTRAR
array.forEach(num =>{funcionamientos...}) : recorre el array por completo
array.filter(numero => numero > 2) : devuelve un array con los elementos mayores a 2.
array.map(numero => numero > 2) : devuelve con array con la cantidad de booleanos, que tenga de elementos el array usado. (true los mayores a 2, false los menores o iguales)

array.concat(otroarray) : une los arrays

-------------------------------------------------------------------------------------------------------------------------------------------


|||-------|||-------|||-------|||-------|||-------MATH-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------


-Redondeo y Truncamiento:
Math.round(valor): Redondea al entero mas cercano. (puede usar un argumento para especificar la cantida de decimales a redondear)
Math.floor(valor): Truncar para abajo.
Math.ceil(valor): Truncar para arriba.

-Valor Absoluto
Math.abs(valor): devuelve el valor absoluto de un numero (distancia hasta el 0).

-Potencia y Raiz
Math.pow(base, exponente) : potencias base a la exponente
Math.sqrt(num): raiz cuadrada del numero pasado por parametro

-Aleatoriedad
Math.random(): genera un numero aleatorio entre 0 y 1.
Math.random() * (max - min) + min : devuelve un numero entre min (incluido) y max

-Maximo y Minimo
Math.max(num1, num2, num3): encontrar el valor maximo de un conjunto de numeros. (Math.max(...Array))
Math.min(num1, num2, num3): encontrar el valor minimo de un conjunto de numeros.Math.min(...Array)

-PI
Math.PI(): Devuelve el numero PI completo

|||-------|||-------|||-------|||-------|||-------FUNCTION-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------|||-------

DECLARACION DE FUNCION: function nombreFuncion(parametro1,parametro2){
    ..
    ..              (TIENE HOISTING)
    ..  
    codigo...
    ..
    ..
} 

EXPRESION FUNCION: const sumar2 = function(parametro1,parametro2){
    ..
    ..              (NO TIENE HOISTING, SE DECLARA ANTES DE USARLA)
    ..
    codigo...      
    ..
    ..
} 


ARROW FUNCTION(expresion):


const saludar = (parametros) =>{
 
 funcionamiento

}


TEORIA:

metodo != funcion

metodo esta relacionado al objeto, en la POO
funcion es un bloque de codigo que puede o no retornar y recibir parametros


|||-------|||-------|||-------|||-------|||-------PROTOTYPE-------|||-------|||-------|||-------|||-------|||-------|||

~Mecanismo que permite a los objetos heredar propiedades y metodos de otros objetos~
~Cada objeto tiene un prototype que es otro objeto del cual hereda metodos y propiedades~

1° : cuando se crea un constructor de Persona por ejemplo.
2° : se le puede agregar un metodo o atributo al prototype del constructor
3° : Persona.prototype.saludar = function(){ console.log(`Hola, mi nombre es ${this.nombre} como estas?`) }


~~ Es mas eficiente usar un prototype para la funcion constructora de un objeto, en vez de declarar la funcion dentro del objeto.
   Es mas eficiente en terminos de memoria~~



|||-------|||-------|||-------|||-------|||-------CLASES-------|||-------|||-------|||-------|||-------|||-------|||


~ Se introdujeron en JS en 2015 para una sintaxis mas similar a los desarrolladores que venian de otro lenguaje de POO~


~~1° Definicion~~: class NombreClase {

(palabra reservada "constructor")
constructor(param1,param2){

    this.param1 = param1;
    this.param2 = param2;
}

mostrar() {

    clg(....);
}

}

~~2° Privacidad-encapsulamiento~~:

usar # antes del nombre del atributo.

class NombreClase {

#param1;

(palabra reservada "constructor")
constructor(param1,param2){

    this.#param1 = param1;
    this.param2 = param2;
}

mostrar() {

    clg(....);
}

}


3° Metodos get() y set():

~ Acceder a los atributos private~
~No es necesario con los atributos que no son private (basta con poner objet.nombreAtributo)~

[Si, por ejemplo, edad fuera private...]

----------------------------------------------
getEdad(){
return this.#edad;
}
----------------------------------------------

----------------------------------------------
setEdad(nuevaEdad){

if(nuevaEdad != null & nuevaEdad >= 0){
    this.#edad = nuevaEdad;
}
else{
    console.log(`No se puede cargar una edad vacia o menor a 0`)
}
}
----------------------------------------------

[  VENTAJAS:
~~Encapsulamiento y seguridad

~~Control de las propiedades: permite validar y controlar los accesos o cambios en los atributos

~~Facilidad de uso
]


|||-------|||-------|||-------|||-------|||-------CALLBACKS-------|||-------|||-------|||-------|||-------|||-------|||


Son funciones que se pasan como argumentos a otras funciones y se ejecutan cuando se completa una tarea o evento en particular.


//CON FUNCION FLECHA:

function modify(array, callback) {

    array.push('negro'); // el evento

    callback(); //se ejecuta la funcion cuando se hace el evento
}


const names = ['santiago', 'gianella', 'facundo'];

//SE LE PASA UNA FUNCION FLECHA CREADA EN EL MOMENTO
modify(names, callback = () => {

    console.log('El array fue modificado');

})//se le pasa el callback como funcion flecha, o se puede pasar una funcion ya declarada/expresada


//CON FUNCION EXPRESADA/DEFINIDA:


function modify(array, callback) {

    array.push('negro'); // el evento

    callback(); //se ejecuta la funcion cuando se hace el evento
}


function callback(){

console.log('El array fue modificado');

}

modify(names,callback);


